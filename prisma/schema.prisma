generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  email          String          @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  hashedPassword String          @map("hashed_password")
  phoneNumber    String?         @map("phone_number")
  absences       Absence[]       @relation("AbsencesToUsers")
  profileFields  ProfileField[]  @relation("ProfileFieldToUsers")
  resetPassword  ResetPassword[] @relation("ResetPasswordToUsers")
  upstreamRoles  Role[]          @relation("RolesToRelatedPlayers")
  roles          Role[]          @relation("RolesToUsers")
  userInvites    UserInvite[]    @relation("UserInvitesToUsers")

  @@map("users")
}

model migrations {
  id     Int      @id @default(autoincrement())
  name   String
  run_on DateTime
}

model accounts {
  id                   Int       @id @default(autoincrement())
  compound_id          String    @unique
  user_id              Int
  provider_type        String
  provider_id          String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  @@index([provider_account_id], name: "provider_account_id")
  @@index([provider_id], name: "provider_id")
  @@index([user_id], name: "user_id")
}

model sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  expires       DateTime
  session_token String   @unique
  access_token  String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model verification_requests {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model UserInvite {
  /// The value of this field is generated by the database as: `uuid_generate_v4()`.
  id          String    @id @default(dbgenerated())
  created_at  DateTime  @default(now())
  user_id     Int
  accepted_at DateTime?
  user        User      @relation("UserInvitesToUsers", fields: [user_id], references: [id])

  @@map("user_invites")
}

model ResetPassword {
  /// The value of this field is generated by the database as: `uuid_generate_v4()`.
  id        String   @id @default(dbgenerated())
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation("ResetPasswordToUsers", fields: [userId], references: [id])

  @@map("reset_password")
}

model ProfileField {
  id        Int             @id @default(autoincrement())
  userId    Int             @map("user_id")
  key       ProfileFieldKey
  value     String?
  createdAt DateTime        @default(now()) @map("created_at")
  user      User            @relation("ProfileFieldToUsers", fields: [userId], references: [id])

  @@index([createdAt], name: "idx_profile_created_at")
  @@index([key, createdAt], name: "idx_profile_fields_key_created_at")
  @@index([userId], name: "idx_profile_fields_user_id")
  @@map("profile_fields")
}

model Absence {
  id          Int           @id @default(autoincrement())
  userId      Int           @map("user_id")
  date        DateTime
  description String        @default("")
  type        AbsenceType
  reason      AbsenceReason
  users       User          @relation("AbsencesToUsers", fields: [userId], references: [id])

  @@index([userId], name: "idx_absences_user_id")
  @@map("absences")
}

model Role {
  /// The value of this field is generated by the database as: `nextval('viewing_permissions_id_seq'::regclass)`.
  id              Int          @id @default(dbgenerated())
  userId          Int          @map("user_id")
  relatedPlayerId Int?         @map("related_player_id")
  type            UserRoleType
  relatedPlayer   User?        @relation("RolesToRelatedPlayers", fields: [relatedPlayerId], references: [id])
  user            User         @relation("RolesToUsers", fields: [userId], references: [id])

  @@map("roles")
}

enum ProfileFieldKey {
  BioAboutMe @map("bio_about_me")
  BioHobbies @map("bio_hobbies")
  BioFavoriteSubject @map("bio_favorite_subject")
  BioMostDifficultSubject @map("bio_most_difficult_subject")
  BioSiblings @map("bio_siblings")
  BioParents @map("bio_parents")
  IntroVideo @map("intro_video")
  AcademicEngagementScore @map("academic_engagement_score")
  AdvisingScore @map("advising_score")
  AthleticScore @map("athletic_score")
  GPA @map("gpa")
  DisciplinaryActions @map("disciplinary_actions")
  BMI @map("bmi")
  PacerTest @map("pacer_test")
  MileTime @map("mile_time")
  Situps @map("situps")
  Pushups @map("pushups")
  HealthAndWellness @map("health_and_wellness")
  Highlights @map("highlights")
  PlayerNumber @map("player_number")

   @@map("profile_field_key")
}

enum AbsenceReason {
  Excused @map("excused")
  Unexcused @map("unexcused")

   @@map("absence_reason")
}

enum AbsenceType {
  School @map("school")
  Academic @map("academic")
  Athletic @map("athletic")

   @@map("absence_type")
}

enum UserRoleType {
  Admin @map("admin")
  Player @map("player")
  Mentor @map("mentor")
  Parent @map("parent")
  Donor @map("donor")

   @@map("user_role")
}
